name: Deploy to Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker environment
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ secrets.TAG_NAME }}_${{ github.sha }}
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            SALT_IP_ADDRESS=${{ secrets.SALT_IP_ADDRESS }}
            NEXT_PUBLIC_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to Server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_PASS: ${{ secrets.SSH_PASS }}
        run: |
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no -p 24700 $SSH_USERNAME@$SSH_HOST << 'ENDSSH'
            # Create container directory if it doesn't exist
            mkdir -p /container && cd /container

            # Stop and remove existing container if it exists
            docker stop ${{ secrets.IMAGE_NAME }} 2>/dev/null || true
            docker rm ${{ secrets.IMAGE_NAME }} 2>/dev/null || true

            # Remove old images
            docker images --filter=reference=${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }} -q | xargs -r docker rmi -f

            # Pull and run new image
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ secrets.TAG_NAME }}_${{ github.sha }}
            docker run -d -p 3012:3000 --name ${{ secrets.IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ secrets.TAG_NAME }}_${{ github.sha }}
         ENDSSH
